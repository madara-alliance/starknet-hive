# yaml-language-server: $schema=https://raw.githubusercontent.com/SchemaStore/schemastore/refs/heads/master/src/schemas/json/github-workflow.json
name: Task - Build And Publish Nightly Docker Image

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      registry:
        description: Container registry domain
        required: true
        type: string
      image-name:
        description: Name for the Docker image
        required: true
        type: string
      image-file:
        description: Dockerfile used to build the image
        required: true
        type: string

permissions:
  contents: read
  packages: write
  attestations: write
  id-token: write

jobs:
  build-nightly:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get latest tag
        id: get-latest-tag
        run: |
          PACKAGE_NAME=$(echo ${{ inputs.image-name }} | tr '[:upper:]' '[:lower:]')
          PACKAGE_INFO=$(
            curl -L \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "https://api.github.com/orgs/madara-alliance/packages/container/$PACKAGE_NAME/versions"
          )

          echo $PACKAGE_INFO

          VERSION_LATEST=$(
            echo $PACKAGE_INFO | \
            jq -r '
              [
                .[].metadata?.container?.tags? // [] | 
                .[] | 
                select(test("^nightly-[0-9]+$")) | 
                ltrimstr("nightly-") | 
                tonumber
              ] | max // -1
            '
          )
          VERSION_NEW=$(($VERSION_LATEST + 1))

          TAG_NEW="nightly-$VERSION_NEW"
          echo "new-tag=$TAG_NEW" >> $GITHUB_OUTPUT
          echo "New tag will be: $TAG_NEW"

      - name: fail
        run: exit 1

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          file: ${{ inputs.image-file }}
          tags: ${{ inputs.registry }}/${{ github.repository_owner }}/${{ inputs.image-name }}:${{ steps.get-latest-tag.outputs.new-tag }}

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ inputs.registry }}/${{ github.repository_owner }}/${{ inputs.image-name }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
