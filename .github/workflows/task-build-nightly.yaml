# yaml-language-server: $schema=https://raw.githubusercontent.com/SchemaStore/schemastore/refs/heads/master/src/schemas/json/github-workflow.json
name: Task - Build And Publish Nightly Docker Image

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      registry:
        description: Container registry domain
        required: true
        type: string
      image-name:
        description: Name for the Docker image
        required: true
        type: string
      image-file:
        description: Dockerfile used to build the image
        required: true
        type: string

permissions:
  contents: read
  packages: write
  attestations: write
  id-token: write

jobs:
  build-nightly:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get latest tag
        id: get-latest-tag
        run: |
          TOKEN="${{ secrets.GITHUB_TOKEN }}"
          REPO="${{ github.repository }}"
          # Convert repo name to lowercase (GHCR requirement)
          PACKAGE_NAME=$(echo "$REPO" | tr '[:upper:]' '[:lower:]')

          # Query existing tags with nightly-NUMBER format
          TAGS=$(curl -s -H "Authorization: Bearer $TOKEN" \
            "https://api.github.com/packages/container/$PACKAGE_NAME/versions" | \
            jq -r '.[].metadata.container.tags[]' | \
            grep -E '^nightly-[0-9]+$' | sort -V)

          # Find highest tag or start at 0
          if [ -z "$TAGS" ]; then
            NEW_VERSION=1
          else
            LATEST_TAG=$(echo "$TAGS" | tail -n 1)
            # Extract just the number part after "nightly-"
            LATEST_VERSION=$(echo "$LATEST_TAG" | sed 's/nightly-//')
            NEW_VERSION=$((LATEST_VERSION + 1))
          fi

          # Form the new tag with the nightly- prefix
          NEW_TAG="nightly-$NEW_VERSION"

          echo "new-tag=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "New tag will be: $NEW_TAG"

      - name: fail
        run: |
          exit 1

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          file: ${{ inputs.image-file }}
          tags: ${{ inputs.image-name }}:${{ steps.get-latest-tag.outputs.new-tag }}

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ inputs.registry }}/${{ inputs.image-name }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
